# audio_upload_whisper_chunking.py
"""
Streamlit: Upload ‚Üí Auto-compress (32 kb/s) ‚Üí Pokud z≈Østane >25 MiB, rozdƒõl na ƒçasov√© kusy ‚Üí Whisper ‚Üí Make ‚Üí Bullet-points
=========================================================================================================================
1) U≈æivatel nahraje audio (MP3/WAV/M4A), max. nap≈ô. 200 MB.
2) Kdy≈æ je soubor > 25 MiB, spust√≠me FFmpeg:
   ‚Ä¢ MP3, mono, 16 kHz, 32 kb/s  
   ‚Üí typicky v√Ωstup < 25 MiB.  
   Pokud ale st√°le > 25 MiB, mus√≠me dƒõlit podle ƒçasu.
3) Pokud v√Ωsledn√° MP3 > 25 MiB:
   a) Pou≈æijeme FFmpeg pro dek√≥dov√°n√≠ t√© MP3 na WAV / PCM v pamƒõti  
   b) ‚ÄûKus po kusu‚Äú rozdƒõl√≠me PCM na danou d√©lku (nap≈ô. 2‚Äì3 min bloky),  
      p≈ôevedeme ka≈æd√Ω blok buƒè p≈ô√≠mo do WAV bufferu nebo do MP3 znova  
      (WAV je v po≈ô√°dku, proto≈æe Whisper p≈ôij√≠m√° WAV nativnƒõ).  
   c) Pos√≠l√°me ka≈æd√Ω kousek zvl√°≈°≈• do Whisper API ‚Üí spoj√≠me texty.
4) Vznikl√Ω `full_transcript` se po≈°le do Make jednokusovƒõ.
5) Make vr√°t√≠ pole bullet-point≈Ø, kter√° vykresl√≠me.

Po≈æadavky:
----------
streamlit
openai
requests

Do `packages.txt` (Streamlit Cloud):
-------------------------------------
ffmpeg
"""

from __future__ import annotations
import io, re, logging, os, subprocess, tempfile, requests, streamlit as st
from openai import OpenAI, OpenAIError

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Konfigurace ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
OPENAI_API_KEY = st.secrets["OPENAI_API_KEY"]
client = OpenAI(api_key=OPENAI_API_KEY)

MAKE_URL   = "https://hook.eu2.make.com/k08ew9w6ozdfougyjg917nzkypgq24f7"
MAKE_TOKEN = st.secrets.get("WEBHOOK_OUT_TOKEN", "demo-token")

WHISPER_LIMIT   = 25 * 1024 * 1024    # 25 MiB
TARGET_SR       = 16_000              # 16 kHz
TARGET_CHANNELS = 1                   # mono
TARGET_BR       = "32k"               # 32 kb/s (komprese)

# D√©lka jednoho chunku pro p≈ô√≠pad, ≈æe MP3 > 25 MiB (v sekund√°ch)
# Nap≈ô. 120 s = 2 minuty; 120 s PCM @ 16 kHz/16bit/mono je ~4 MB,  
# tak≈æe se to vejde vƒç. overheadu. Upravit podle pot≈ôeby.
CHUNK_SEC       = 120                 # d√©lka jednoho kusu pro ≈ôez√°n√≠

logging.basicConfig(level=logging.INFO)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Funkce pro ‚Äûhrubou‚Äú kompresi MP3 CLI (mono, 16 kHz, 32 kb/s) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def compress_if_needed(raw: bytes, ext: str) -> bytes:
    """
    Pokud raw ‚â§ 25 MiB ‚Üí vr√°t√≠ raw beze zmƒõny.  
    Pokud raw > 25 MiB ‚Üí zap√≠≈°e raw do tmp, spust√≠ FFmpeg: MP3, 16 kHz, mono, 32 kb/s ‚Üí v√Ωsledn√© MP3 vr√°t√≠.
    """
    if len(raw) <= WHISPER_LIMIT:
        return raw

    # 1) Ulo≈æ√≠me p≈Øvodn√≠ audio do tmp souboru
    with tempfile.NamedTemporaryFile(delete=False, suffix=f".{ext}") as tmp_in:
        tmp_in.write(raw)
        tmp_in.flush()
        in_path = tmp_in.name

    # 2) Komprimujeme pomoc√≠ FFmpeg
    tmp_out = tempfile.NamedTemporaryFile(delete=False, suffix=".mp3")
    out_path = tmp_out.name
    tmp_out.close()

    cmd = [
        "ffmpeg", "-y", "-i", in_path,
        "-ar", str(TARGET_SR),
        "-ac", str(TARGET_CHANNELS),
        "-b:a", TARGET_BR,
        "-f", "mp3",
        out_path
    ]
    try:
        subprocess.run(cmd, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except subprocess.CalledProcessError as e:
        os.unlink(in_path)
        os.unlink(out_path)
        st.error(f"‚ùå Chyba p≈ôi kompresi (FFmpeg): {e.stderr.decode(errors='ignore')}")
        raise

    # 3) P≈ôeƒçteme v√Ωsledek a sma≈æeme temp soubory
    with open(out_path, "rb") as f:
        compressed = f.read()
    os.unlink(in_path)
    os.unlink(out_path)
    return compressed

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Funkce pro chunking a p≈ôevod na PCM WAV ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def split_to_wav_chunks(mp3_bytes: bytes) -> list[bytes]:
    """
    1) Zap√≠≈°e mp3_bytes do doƒçasn√©ho souboru (tmp.mp3).  
    2) Pomoc√≠ FFmpeg dek√≥duje celou MP3 do WAV (pipe:1).  
    3) Ve WAV bin√°rn√≠m headeru si vyƒçteme hlaviƒçku a chunkujeme PCM po CHUNK_SEC.  
       Ka≈æd√Ω samostatn√Ω WAV block vr√°t√≠me jako samostatn√© WAV bytes.
    """
    # a) ulo≈æ√≠me mp3_bytes do tmp souboru
    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp_in:
        tmp_in.write(mp3_bytes)
        tmp_in.flush()
        in_path = tmp_in.name

    # b) dek√≥dujeme do raw WAV do bin√°rn√≠ho bufferu
    #    ffmpeg -i tmp.mp3 -ar 16000 -ac 1 -f wav pipe:1
    cmd = [
        "ffmpeg", "-i", in_path,
        "-ar", str(TARGET_SR),
        "-ac", str(TARGET_CHANNELS),
        "-f", "wav", "pipe:1"
    ]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    wav_data, stderr = proc.communicate()
    if proc.returncode != 0:
        os.unlink(in_path)
        st.error(f"‚ùå Chyba p≈ôi dek√≥dov√°n√≠ WAV (FFmpeg): {stderr.decode(errors='ignore')}")
        raise RuntimeError("FFmpeg decode failed")

    os.unlink(in_path)

    # c) teƒè m√°me cel√© WAV v `wav_data`, co≈æ vypad√° takto:
    #    b'RIFF....WAVEfmt ... data....' (hlaviƒçka + PCM)
    #    WAV header = 44 bajt≈Ø (obvykle), pot√© PCM vzorky 16bit int16
    # d) Rozdƒõl√≠me to na hlaviƒçku (header) a PCM data:
    header = wav_data[:44]         # standardn√≠ WAV hlaviƒçka 44 bajt≈Ø
    pcm = wav_data[44:]            # zbytek jsou 16bit-int16 vzorky

    # e) Kolik PCM bajt≈Ø = (SR * 2 B/sample * CHUNK_SEC)
    bytes_per_chunk = TARGET_SR * 2 * CHUNK_SEC

    chunks: list[bytes] = []
    for i in range(0, len(pcm), bytes_per_chunk):
        block = pcm[i : i + bytes_per_chunk]
        # Zabal√≠me ka≈æd√Ω PCM blok znova do validn√≠ WAV hlaviƒçky + data:
        wav_block = header[:4]                # "RIFF"
        size_chunk = 36 + len(block)          # riff chunk size = 36 + data_len
        wav_block += (size_chunk).to_bytes(4, "little")
        wav_block += header[8:44]             # zbytek hlaviƒçky od "WAVE" po "data"
        wav_block += block                     # PCM data
        chunks.append(wav_block)

    return chunks

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Funkce Whisper & Make ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def whisper_transcribe(b: bytes, filename: str) -> str:
    """
    Po≈°le byty (MP3 nebo WAV) do Whisper (model whisper-1). Vr√°t√≠ text.
    Zvedne OpenAIError, pokud dojde k chybƒõ.
    """
    try:
        file_like = io.BytesIO(b)
        file_like.name = filename  # OpenAI Whisper lib akceptuje tento attribut
        resp = client.audio.transcriptions.create(
            model="whisper-1",
            file=file_like,
            language="cs"
        )
        return resp.text
    except OpenAIError as e:
        st.error(f"‚ùå Whisper API chyba: {e}")
        raise

def post_to_make(text: str) -> list[str]:
    """
    Po≈°le p≈ôepis na Make webhook ‚Üí vr√°t√≠ pole string≈Ø.
    Pokud Make sel≈æe ‚Üí vr√°t√≠ pr√°zdn√Ω list.
    """
    try:
        r = requests.post(
            MAKE_URL,
            json={"token": MAKE_TOKEN, "transcript": text, "existing": []},
            timeout=90
        )
        r.raise_for_status()
        data = r.json()
        return data if isinstance(data, list) else []
    except Exception as e:
        st.error(f"‚ùå Make webhook chyba: {e}")
        return []

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Helper pro form√°tov√°n√≠ bullet-point≈Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
DASH  = re.compile(r"\s+-\s+")
STRIP = "-‚Äì‚Äî‚Ä¢ "
def fmt_bullet(raw: str) -> str:
    """Prvn√≠ho ≈ô√°dku ka≈æd√©ho bulletu udƒõl√° <strong>...</strong>, dal≈°√≠ <li>‚Ä¶</li>."""
    if "\n" in raw:
        parts = [ln.strip() for ln in raw.splitlines() if ln.strip()]
    else:
        items = DASH.split(raw.strip())
        parts = [items[0]] + [f"- {p}" for p in items[1:]]
    if not parts:
        return ""
    head, *det = parts
    head_html = f"<strong>{head.upper()}</strong>"
    if not det:
        return head_html
    items_html = "".join(f"<li>{d.lstrip(STRIP)}</li>" for d in det)
    return f"{head_html}<ul>{items_html}</ul>"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ UI ‚Äì Streamlit layout ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
st.set_page_config("Audio ‚Üí Whisper ‚Üí Make Demo", layout="centered")
st.title("üéôÔ∏è Audio Upload ‚Üí Auto-Compress ‚Üí Chunk ‚Üí Whisper ‚Üí Make ‚Üí Bullet-points")

uploaded = st.file_uploader(
    "‚ûï Nahraj MP3 / WAV / M4A (do ~200 MB)", 
    type=["mp3", "wav", "m4a"]
)

if uploaded:
    raw_bytes = uploaded.read()
    size_mb = len(raw_bytes) / (1024 * 1024)
    st.write(f"Velikost souboru: **{size_mb:.1f} MB**")

    # 1) Zkomprimuj (32 kbit/s), pokud >25 MiB
    ext = uploaded.name.split('.')[-1].lower()  # p≈ô√≠pona, nap≈ô. "mp3", "wav", "m4a"
    try:
        compressed = compress_if_needed(raw_bytes, ext=ext)
    except Exception:
        st.stop()
    comp_mb = len(compressed) / (1024 * 1024)
    if comp_mb < size_mb:
        st.info(f"Slo≈æil jsem >25 MB ‚Üí po kompresi: **{comp_mb:.1f} MB**")
    else:
        st.info("Soubor ‚â§ 25 MiB ‚Üí pos√≠l√°m origin√°l (bez komprese)")

    # 2) Pokud je komprimovan√© MP3 > 25 MiB, rozdƒõl ho na WAV chunk
    if len(compressed) > WHISPER_LIMIT:
        st.warning("I po kompresi MP3 > 25 MiB ‚Üí prov√°d√≠m chunking na WAV kousky‚Ä¶")
        with st.spinner("üî™ Rozdƒõluji do WAV chunk≈Ø‚Ä¶"):
            wav_chunks = split_to_wav_chunks(compressed)
    else:
        wav_chunks = []  # ≈æ√°dn√© chunky, proto≈æe p≈Øvodn√≠ MIME je OK (MP3 < limit)

    # 3) P≈ôiprav fin√°ln√≠ seznam ‚Äûk p≈ôevodu do Whisperu‚Äú:
    #    ‚Ä¢ pokud m√°me WAV_chunks, budou je testovat jako jednotliv√© WAV bloky
    #    ‚Ä¢ jinak po≈°leme origin√°l (nebo komprimovan√© MP3) jako jeden kousek
    tasks: list[tuple[bytes,str]] = []
    if wav_chunks:
        for idx, w in enumerate(wav_chunks, start=1):
            tasks.append((w, f"chunk_{idx}.wav"))
    else:
        # po≈°li MP3 p≈ô√≠mo
        tasks.append((compressed, uploaded.name))

    # 4) Po≈°li ka≈ædou ƒç√°st do Whisper API (sƒç√≠tejme texty dohromady)
    full_transcript = ""
    for i, (chunk_bytes, fname) in enumerate(tasks, start=1):
        with st.spinner(f"‚è≥ Whisper ƒç√°st {i}/{len(tasks)}‚Ä¶"):
            try:
                txt = whisper_transcribe(chunk_bytes, filename=fname)
            except OpenAIError:
                st.stop()
        full_transcript += " " + txt
        st.success(f"ƒå√°st {i} hotov√°")

    st.subheader("üìÑ Kompletn√≠ p≈ôepis")
    st.text_area(" ", full_transcript.strip(), height=250)

    # 5) Ode≈°li na Make a vykresli bullet-pointy
    with st.spinner("üì§ Odes√≠l√°m p≈ôepis na Make‚Ä¶"):
        bullets = post_to_make(full_transcript)

    if bullets:
        st.markdown("---")
        st.subheader("üìå Bullet-points z Make")
        st.markdown(
            "<ul>" + "".join(f"<li>{fmt_bullet(b)}</li>" for b in bullets) + "</ul>",
            unsafe_allow_html=True
        )
    else:
        st.info("‚ÑπÔ∏è Make nevr√°til ≈æ√°dn√© bullet-pointy.")
